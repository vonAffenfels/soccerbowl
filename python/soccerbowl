#!/usr/bin/python
__version__ = "0.1"
__author__ = "von Affenfels GmbH"

import sys, argparse, logging, logging.handlers, asyncore, base64
from socketIO_client import SocketIO, BaseNamespace

logger = logging.getLogger()

class MatrixNamespace(BaseNamespace):
    def on_connect(self):
        logger.debug("Connected")
        self._io.emit("GetMatrix", self.GetMatrixResponse)

    def GetMatrixResponse(self, data):
        logger.debug("GetMatrixResponse")

    def on_close(self):
        logger.debug("Closed connection")

    def on_SetPixelIndex(self, data):
        logger.debug("On SetPixelIndex")

    def on_SwapBuffers(self):
        logger.debug("On SwapBuffers")

    def on_Fill(self, data):
        logger.debug("On Fill")

    def on_ReloadMatrix(self, data):
        logger.debug("On ReloadMatrix")

    def on_MakePhoto(self, cb):
        logger.debug("On MakePhoto")
        with open("../testbild.jpg", "rb") as image_file:
            encoded_string = base64.b64encode(image_file.read())
            cb(encoded_string)

class SoccerBowl(argparse.ArgumentParser):
    def __init__(self, *args, **kwargs):
        super(SoccerBowl, self).__init__(*args, **kwargs)

        self.add_argument("-d", "--debug", action = "store_true", help = "Enables debug output")
        self.add_argument("--syslog", action = "store_true", help = "Enables logging to syslog")
        self.add_argument("--host", action = "store", help = "Serverhost", default = "iot.saij.de")
        self.add_argument("--port", action = "store", help = "Serverport", default = 11666)
        
        self.__args = {}

    def process(self):
        self.__args = vars(self.parse_args())

        if self.__args["syslog"]:
            syslog = logging.handlers.SysLogHandler(address = '/dev/log', facility = logging.handlers.SysLogHandler.LOG_DAEMON);
            syslog.setFormatter(logging.Formatter("soccerbowl: [%(levelname)s] %(message)s"))
            logger.addHandler(syslog)
        else:
            stdout = logging.StreamHandler()
            stdout.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
            logger.addHandler(stdout)

        if self.__args["debug"]:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)

        logging.getLogger('requests').setLevel(logging.WARNING)

        logger.info("Started SoccerBowl v%s" % __version__)

        self.__socketIo = SocketIO(self.__args["host"], self.__args["port"], MatrixNamespace)

        try:
            # Start loop
            # asyncore.loop()
            self.__socketIo.wait()
        except KeyboardInterrupt:
            print "Exiting\n"
            sys.exit(0)

        return True

# Main function
if __name__ == "__main__":
    parser = SoccerBowl()
    if (not parser.process()):
        parser.print_help()